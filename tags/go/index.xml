<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go - Tag - Blog</title>
        <link>https://serialt.github.io/tags/go/</link>
        <description>Go - Tag - Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>tserialt@gmail.com (serialt)</managingEditor>
            <webMaster>tserialt@gmail.com (serialt)</webMaster><lastBuildDate>Sun, 13 Jul 2025 21:50:01 &#43;0800</lastBuildDate><atom:link href="https://serialt.github.io/tags/go/" rel="self" type="application/rss+xml" /><item>
    <title>Simple-Gin</title>
    <link>https://serialt.github.io/posts/2025-07-13-gin/</link>
    <pubDate>Sun, 13 Jul 2025 21:50:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-07-13-gin/</guid>
    <description><![CDATA[Simple Gin package main import ( &#34;fmt&#34; &#34;log/slog&#34; &#34;net/http&#34; &#34;time&#34; &#34;github.com/gin-gonic/gin&#34; &#34;github.com/prometheus/client_golang/prometheus&#34; &#34;github.com/prometheus/client_golang/prometheus/promhttp&#34; ) type msg struct { Count int64 `json:&#34;count&#34;` } var pingCounter = prometheus.NewCounter( prometheus.CounterOpts{ Name: &#34;ping_request_count&#34;, Help: &#34;No of request handled by Ping handler&#34;, }, ) var httpReqs = prometheus.NewCounterVec( prometheus.CounterOpts{ Name: &#34;http_requests_total&#34;, Help: &#34;How many HTTP requests processed, partitioned by status code and HTTP method.&#34;, }, []string{&#34;code&#34;, &#34;method&#34;}, ) func PromHandler(handler http.Handler) gin.HandlerFunc { return func(c]]></description>
</item>
<item>
    <title>Go exporter</title>
    <link>https://serialt.github.io/posts/2025-07-13-exporter/</link>
    <pubDate>Sun, 13 Jul 2025 20:50:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-07-13-exporter/</guid>
    <description><![CDATA[Exporter 开发 Prometheus Exporter是一个用来收集和暴露指标数据的工具，通过与Prometheus监控系统一起使用。它的结构包括两个组件：Collect]]></description>
</item>
<item>
    <title>Go Wire</title>
    <link>https://serialt.github.io/posts/2025-06-28.go-wire/</link>
    <pubDate>Sat, 28 Jun 2025 20:40:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-06-28.go-wire/</guid>
    <description><![CDATA[Go Wire wire是 Google 开源的一个依赖注入工具。它是一个代码生成器，并不是一个框架。我们只需要在一个特殊的go文件中告诉wire类型之间的依赖关系，]]></description>
</item>
<item>
    <title>Go code</title>
    <link>https://serialt.github.io/posts/2025-04-27.go-code/</link>
    <pubDate>Sun, 27 Apr 2025 20:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-04-27.go-code/</guid>
    <description><![CDATA[Go 代码片段 go goroutines pool package main import ( &#34;fmt&#34; &#34;github.com/sourcegraph/conc/pool&#34; ) func main() { p := pool.New().WithMaxGoroutines(3) for i := 1; i &lt;= 5; i++ { p.Go(func() { fmt.Println(i) }) } p.Wait() } 带ctx 的go goroutines pool package main import ( &#34;context&#34; &#34;errors&#34; &#34;fmt&#34; &#34;github.com/sourcegraph/conc/pool&#34; ) func main() { p := pool.New(). WithMaxGoroutines(4). WithContext(context.Background()). WithCancelOnError() for i := 0; i &lt;]]></description>
</item>
<item>
    <title>Go lo</title>
    <link>https://serialt.github.io/posts/2025-01-04-lo/</link>
    <pubDate>Sat, 04 Jan 2025 14:40:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-01-04-lo/</guid>
    <description><![CDATA[Go lo 使用 go get github.com/samber/lo 使用 // 将切片中的重复元素去掉，只保留第一个出现的元素。 names := lo.Uniq([]string{&#34;Samuel&#34;, &#34;John&#34;, &#34;Samuel&#34;}) // []string{&#34;Samuel&#34;, &#34;John&#34;} // 生成map // 将切片或数组转换为map，key是call]]></description>
</item>
<item>
    <title>Go set</title>
    <link>https://serialt.github.io/posts/2025-01-04-goset/</link>
    <pubDate>Sat, 04 Jan 2025 14:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-01-04-goset/</guid>
    <description><![CDATA[Go Set 集合 Github地址：https://github.com/deckarep/golang-set 使用： go get github.com/deckarep/golang-set/v2 集合里的元素不会重复 示例：]]></description>
</item>
<item>
    <title>Go goose</title>
    <link>https://serialt.github.io/posts/2024-11-25-goose/</link>
    <pubDate>Mon, 25 Nov 2024 19:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-11-25-goose/</guid>
    <description><![CDATA[Goose 数据库版本管理 Goose 是一个用于管理数据库迁移的工具，类似于 Flyway 和 Liquibase。它可以方便地管理数据库模式的版本，并应用相应的 SQL 脚本。你提到]]></description>
</item>
<item>
    <title>Go conc</title>
    <link>https://serialt.github.io/posts/2024-10-20-go-conc/</link>
    <pubDate>Sun, 20 Oct 2024 19:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-10-20-go-conc/</guid>
    <description><![CDATA[Go conc 参考链接 https://www.liwenzhou.com/posts/Go/conc/ go package main import ( &#34;fmt&#34; &#34;time&#34; ) func main() { for i := 0; i &lt; 5; i++ { go func(num int) { fmt.Println(num) }(i) } time.Sleep(5 * time.Second) } sync.WaitGroup 控制并发 package main import ( &#34;fmt&#34; &#34;sync&#34; ) var wg sync.WaitGroup func hello(i int) { defer wg.Done() fmt.Println(&#34;Hello Goroutine!&#34;, i) } func main() { for i := 0;]]></description>
</item>
<item>
    <title>Go basic</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-basic/</link>
    <pubDate>Sun, 11 Aug 2024 10:26:09 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-basic/</guid>
    <description><![CDATA[1、变量定义 var name string var isOk bool // 隐式申明 a := 100 str := &#34;sugar&#34; // 批量声明 var ( a string b int c bool d float32 ) // 变量的初始化 var name string = &#34;github&#34; var age int = 10 var name, age = &#34;github&#34;, 11 // 类型推导 var name =]]></description>
</item>
<item>
    <title>Go time</title>
    <link>https://serialt.github.io/posts/2024-06-02-go-time/</link>
    <pubDate>Sun, 02 Jun 2024 10:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-02-go-time/</guid>
    <description><![CDATA[Go time包 参考链接：https://www.liwenzhou.com/posts/Go/go_time/ 时间和日期是我们编程中经常会用到]]></description>
</item>
</channel>
</rss>
