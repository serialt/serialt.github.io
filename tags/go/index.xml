<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go - Tag - Blog</title>
        <link>https://serialt.github.io/tags/go/</link>
        <description>Go - Tag - Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>tserialt@gmail.com (serialt)</managingEditor>
            <webMaster>tserialt@gmail.com (serialt)</webMaster><lastBuildDate>Sun, 20 Oct 2024 19:38:01 &#43;0800</lastBuildDate><atom:link href="https://serialt.github.io/tags/go/" rel="self" type="application/rss+xml" /><item>
    <title>Go conc</title>
    <link>https://serialt.github.io/posts/2024-10-20.go-conc/</link>
    <pubDate>Sun, 20 Oct 2024 19:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-10-20.go-conc/</guid>
    <description><![CDATA[Go conc 参考链接 https://www.liwenzhou.com/posts/Go/conc/ go package main import ( &#34;fmt&#34; &#34;time&#34; ) func main() { for i := 0; i &lt; 5; i++ { go func(num int) { fmt.Println(num) }(i) } time.Sleep(5 * time.Second) } sync.WaitGroup 控制并发 package main import ( &#34;fmt&#34; &#34;sync&#34; ) var wg sync.WaitGroup func hello(i int) { defer wg.Done() fmt.Println(&#34;Hello Goroutine!&#34;, i) } func main() { for i := 0;]]></description>
</item>
<item>
    <title>Go basic</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-basic/</link>
    <pubDate>Sun, 11 Aug 2024 10:26:09 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-basic/</guid>
    <description><![CDATA[1、变量定义 var name string var isOk bool // 隐式申明 a := 100 str := &#34;sugar&#34; // 批量声明 var ( a string b int c bool d float32 ) // 变量的初始化 var name string = &#34;github&#34; var age int = 10 var name, age = &#34;github&#34;, 11 // 类型推导 var name =]]></description>
</item>
<item>
    <title>Go time</title>
    <link>https://serialt.github.io/posts/2024-06-02-go-time/</link>
    <pubDate>Sun, 02 Jun 2024 10:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-02-go-time/</guid>
    <description><![CDATA[Go time包 参考链接：https://www.liwenzhou.com/posts/Go/go_time/ 时间和日期是我们编程中经常会用到]]></description>
</item>
<item>
    <title>Go storm</title>
    <link>https://serialt.github.io/posts/2024-06-02-go-storm/</link>
    <pubDate>Sun, 02 Jun 2024 10:36:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-02-go-storm/</guid>
    <description><![CDATA[Go Storm storm是一个使用BoltDB的上层orm框架 https://juejin.cn/post/7031361355856740389 数据查看工具: https://github.com/br0xen/boltbrowser 驱动: https://github.com/asdine/storm 下载boltbrowser go install github.com/br0xen/boltbrowser@latest 使用lib go get github.com/asdine/storm 一、基本使用 初]]></description>
</item>
<item>
    <title>Go slog</title>
    <link>https://serialt.github.io/posts/2024-06-02-go-slog/</link>
    <pubDate>Sun, 02 Jun 2024 10:33:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-02-go-slog/</guid>
    <description><![CDATA[slog 结构化日志 参考链接：https://betterstack.com/community/guides/logging/logging-in]]></description>
</item>
<item>
    <title>Go shamir</title>
    <link>https://serialt.github.io/posts/2024-06-02-go-shamir/</link>
    <pubDate>Sun, 02 Jun 2024 10:32:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-02-go-shamir/</guid>
    <description><![CDATA[Shamir密钥分享算法 参考：https://www.cxyzjd.com/article/shangsongwww/90266455 秘密共]]></description>
</item>
<item>
    <title>Go pinyin</title>
    <link>https://serialt.github.io/posts/2024-06-02-go-pinyin/</link>
    <pubDate>Sun, 02 Jun 2024 10:31:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-02-go-pinyin/</guid>
    <description><![CDATA[Go 汉字转拼音库 汉语拼音转换工具 Go 版。 1、安装 go get -u github.com/mozillazg/go-pinyin 安装cli工具 go get -u github.com/mozillazg/go-pinyin/cmd/pinyin $ pinyin 中国人 zhōng guó rén 2、简单使用 package main import ( &#34;fmt&#34; &#34;github.com/mozillazg/go-pinyin&#34; ) func main() { hans]]></description>
</item>
<item>
    <title>Go exec</title>
    <link>https://serialt.github.io/posts/2024-06-02-go-os-exec/</link>
    <pubDate>Sun, 02 Jun 2024 10:30:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-02-go-os-exec/</guid>
    <description><![CDATA[os/exec 系统内执行命令 1、查找命令所在的路径 func findCommandPath(str string) (string, error) { path, err := exec.LookPath(str) if err != nil { return &#34;&#34;, err } return path, nil } 2、CombinedOutput组合输出，标准正确错误输]]></description>
</item>
<item>
    <title>Go gorm</title>
    <link>https://serialt.github.io/posts/2024-06-02-go-gorm/</link>
    <pubDate>Sun, 02 Jun 2024 10:29:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-02-go-gorm/</guid>
    <description><![CDATA[Gorm 官网：https://gorm.io/ 特性： 全功能 ORM 关联 (Has One，Has Many，Belongs To，Many To Many，多态，单表继承)]]></description>
</item>
<item>
    <title>Go goph</title>
    <link>https://serialt.github.io/posts/2024-06-02-go-goph/</link>
    <pubDate>Sun, 02 Jun 2024 10:27:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-02-go-goph/</guid>
    <description><![CDATA[Go Goph 模块 github地址：https://github.com/melbahja/goph go开发封装的 ssh client 模块 Features Easy to use and simple API. Supports known hosts by default. Supports connections]]></description>
</item>
</channel>
</rss>
