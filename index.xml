<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Blog</title>
        <link>https://serialt.github.io/</link>
        <description>This is my cool site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>tserialt@gmail.com (serialt)</managingEditor>
            <webMaster>tserialt@gmail.com (serialt)</webMaster><lastBuildDate>Sun, 13 Jul 2025 20:50:01 &#43;0800</lastBuildDate>
            <atom:link href="https://serialt.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Go Wire</title>
    <link>https://serialt.github.io/posts/2025-07-13-exporter/</link>
    <pubDate>Sun, 13 Jul 2025 20:50:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-07-13-exporter/</guid>
    <description><![CDATA[Exporter 开发 Prometheus Exporter是一个用来收集和暴露指标数据的工具，通过与Prometheus监控系统一起使用。它的结构包括两个组件：Collect]]></description>
</item>
<item>
    <title>Simple-Gin</title>
    <link>https://serialt.github.io/posts/2025-07-13-gin/</link>
    <pubDate>Sun, 13 Jul 2025 20:50:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-07-13-gin/</guid>
    <description><![CDATA[Simple Gin package main import ( &#34;fmt&#34; &#34;log/slog&#34; &#34;net/http&#34; &#34;time&#34; &#34;github.com/gin-gonic/gin&#34; &#34;github.com/prometheus/client_golang/prometheus&#34; &#34;github.com/prometheus/client_golang/prometheus/promhttp&#34; ) type msg struct { Count int64 `json:&#34;count&#34;` } var pingCounter = prometheus.NewCounter( prometheus.CounterOpts{ Name: &#34;ping_request_count&#34;, Help: &#34;No of request handled by Ping handler&#34;, }, ) var httpReqs = prometheus.NewCounterVec( prometheus.CounterOpts{ Name: &#34;http_requests_total&#34;, Help: &#34;How many HTTP requests processed, partitioned by status code and HTTP method.&#34;, }, []string{&#34;code&#34;, &#34;method&#34;}, ) func PromHandler(handler http.Handler) gin.HandlerFunc { return func(c]]></description>
</item>
<item>
    <title>Go Wire</title>
    <link>https://serialt.github.io/posts/2025-06-28.go-wire/</link>
    <pubDate>Sat, 28 Jun 2025 20:40:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-06-28.go-wire/</guid>
    <description><![CDATA[Go Wire wire是 Google 开源的一个依赖注入工具。它是一个代码生成器，并不是一个框架。我们只需要在一个特殊的go文件中告诉wire类型之间的依赖关系，]]></description>
</item>
<item>
    <title>Jellyfin</title>
    <link>https://serialt.github.io/posts/2025-05-18.jellyfin/</link>
    <pubDate>Sun, 18 May 2025 20:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-05-18.jellyfin/</guid>
    <description><![CDATA[Jellyfin 家庭影院 docker 安装 docker pull jellyfin/jellyfin docker run -d --name=Jellyfin -p 8096:8096 \ # --name=Jellyfin 将容器名定义为 Jellyfin -p 8920:8920 -p 7359:7359/udp -p 1900:1900/udp #这三个端口为可选项 \ -v `pwd`/config:/config -v `pwd`/cache:/cache -v /media:/media \ -e TZ=Asia/Shanghai -e PUID=0 -e PGID=0 --device=/dev/dri:/dev/dri --add-host=api.themoviedb.org:13.224.161.90 \ #为容器增加 host 指向]]></description>
</item>
<item>
    <title>Go code</title>
    <link>https://serialt.github.io/posts/2025-04-27.go-code/</link>
    <pubDate>Sun, 27 Apr 2025 20:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-04-27.go-code/</guid>
    <description><![CDATA[Go 代码片段 go goroutines pool package main import ( &#34;fmt&#34; &#34;github.com/sourcegraph/conc/pool&#34; ) func main() { p := pool.New().WithMaxGoroutines(3) for i := 1; i &lt;= 5; i++ { p.Go(func() { fmt.Println(i) }) } p.Wait() } 带ctx 的go goroutines pool package main import ( &#34;context&#34; &#34;errors&#34; &#34;fmt&#34; &#34;github.com/sourcegraph/conc/pool&#34; ) func main() { p := pool.New(). WithMaxGoroutines(4). WithContext(context.Background()). WithCancelOnError() for i := 0; i &lt;]]></description>
</item>
<item>
    <title>Go lo</title>
    <link>https://serialt.github.io/posts/2025-01-04-lo/</link>
    <pubDate>Sat, 04 Jan 2025 14:40:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-01-04-lo/</guid>
    <description><![CDATA[Go lo 使用 go get github.com/samber/lo 使用 // 将切片中的重复元素去掉，只保留第一个出现的元素。 names := lo.Uniq([]string{&#34;Samuel&#34;, &#34;John&#34;, &#34;Samuel&#34;}) // []string{&#34;Samuel&#34;, &#34;John&#34;} // 生成map // 将切片或数组转换为map，key是call]]></description>
</item>
<item>
    <title>Go set</title>
    <link>https://serialt.github.io/posts/2025-01-04-goset/</link>
    <pubDate>Sat, 04 Jan 2025 14:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-01-04-goset/</guid>
    <description><![CDATA[Go Set 集合 Github地址：https://github.com/deckarep/golang-set 使用： go get github.com/deckarep/golang-set/v2 集合里的元素不会重复 示例：]]></description>
</item>
<item>
    <title>Go goose</title>
    <link>https://serialt.github.io/posts/2024-11-25-goose/</link>
    <pubDate>Mon, 25 Nov 2024 19:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-11-25-goose/</guid>
    <description><![CDATA[Goose 数据库版本管理 Goose 是一个用于管理数据库迁移的工具，类似于 Flyway 和 Liquibase。它可以方便地管理数据库模式的版本，并应用相应的 SQL 脚本。你提到]]></description>
</item>
<item>
    <title>Java Basic</title>
    <link>https://serialt.github.io/posts/2024-10-26-java/</link>
    <pubDate>Sat, 26 Oct 2024 19:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-10-26-java/</guid>
    <description><![CDATA[Java 配置settings 默认读取位置 ~/.m2 curl -O https://repo1.maven.org/maven2/archetype-catalog.xml &lt;settings xmlns=&#34;http://maven.apache.org/SETTINGS/1.0.0&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34; xsi:schemaLocation=&#34;http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd&#34;&gt; &lt;localRepository&gt;/home/sugar/.m2/repository&lt;/localRepository&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;archetype-catalog&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;properties&gt; &lt;archetypeCatalog&gt;file:///Users/sugar/.m2/archetype-catalog.xml&lt;/archetypeCatalog&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;/settings&gt; # 手动下载依赖 mvn -B -f pom.xml -s /usr/share/maven/ref/settings.xml dependency:resolve # 打包 mvn package 一、基]]></description>
</item>
<item>
    <title>Ubuntu cloud-init</title>
    <link>https://serialt.github.io/posts/2024-10-26-ubuntu-cloud-init/</link>
    <pubDate>Sat, 26 Oct 2024 14:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-10-26-ubuntu-cloud-init/</guid>
    <description><![CDATA[cloud-init https://hmli.ustc.edu.cn/doc/linux/ubuntu-autoinstall/ubuntu-autoinstall.html ubuntu 安装后获取当前的user-data: /var/log/installer/autoinstall-user-data 示例： #cloud-config autoinstall: version: 1 apt: disable_components: [] fallback: offline-install geoip: true mirror-selection: primary: - uri: http://mirrors.ustc.edu.cn/ubuntu-ports - country-mirror - arches: &amp;id001 - amd64 - i386 uri: http://mirrors.ustc.edu.cn/ubuntu/ - arches: &amp;id002 - s390x - arm64 - armhf - powerpc - ppc64el - riscv64 uri: http://mirrors.ustc.edu.cn/ubuntu-ports preserve_sources_list:]]></description>
</item>
</channel>
</rss>
