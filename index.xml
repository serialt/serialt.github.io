<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Blog</title>
        <link>https://serialt.github.io/</link>
        <description>This is my cool site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>tserialt@gmail.com (serialt)</managingEditor>
            <webMaster>tserialt@gmail.com (serialt)</webMaster><lastBuildDate>Sat, 11 Nov 2023 10:26:09 &#43;0800</lastBuildDate>
            <atom:link href="https://serialt.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Go basic</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-basic/</link>
    <pubDate>Sat, 11 Nov 2023 10:26:09 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-basic/</guid>
    <description><![CDATA[1、变量定义 var name string var isOk bool // 隐式申明 a := 100 str := &#34;serialt&#34; // 批量声明 var ( a string b int c bool d float32 ) // 变量的初始化 var name string = &#34;github&#34; var age int = 10 var name, age = &#34;github&#34;, 11 // 类型推导 var name =]]></description>
</item>
<item>
    <title>Go gopsutil</title>
    <link>https://serialt.github.io/posts/2023-11-11-gopsutil/</link>
    <pubDate>Sat, 11 Nov 2023 10:25:07 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-gopsutil/</guid>
    <description><![CDATA[gopsutil 库 参考链接：https://segmentfault.com/a/1190000022281174 简介 gopsutil是 Python 工具库psuti]]></description>
</item>
<item>
    <title>Go yaml</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-yaml/</link>
    <pubDate>Sat, 11 Nov 2023 10:25:07 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-yaml/</guid>
    <description><![CDATA[Go 读取yaml格式配置文件 package config import ( &#34;fmt&#34; &#34;io/ioutil&#34; &#34;gopkg.in/yaml.v3&#34; ) type Service struct { Host string `json:&#34;host&#34; yaml:&#34;host&#34;` Port string `json:&#34;port&#34; yaml:&#34;port&#34;` } type MyConfig struct { Service Service `json:&#34;service&#34; yaml:&#34;service&#34;` } var Config *MyConfig func LoadConfig(filepath string) { if filepath == &#34;&#34; { return } // 读yaml文件 config, err := ioutil.ReadFile(filepath) if]]></description>
</item>
<item>
    <title>Go strconv</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-strconv/</link>
    <pubDate>Sat, 11 Nov 2023 10:25:05 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-strconv/</guid>
    <description><![CDATA[Go语言内置包之strconv Go语言中strconv包实现了基本数据类型和其字符串表示的相互转换。 strconv包 strconv包实现了基]]></description>
</item>
<item>
    <title>Go tail</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-tail/</link>
    <pubDate>Sat, 11 Nov 2023 10:25:05 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-tail/</guid>
    <description><![CDATA[Go tail库 实时读取文件内容 go get github.com/hpcloud/tail 示例： package main import ( &#34;fmt&#34; &#34;time&#34; &#34;github.com/hpcloud/tail&#34; ) func main() { fileName := &#34;./my.log&#34; config := tail.Config{ ReOpen: true, // 重新打开 Follow: true, // 是否跟随 Location: &amp;tail.SeekInfo{Offset: 0, Whence: 2}, // 从文件的哪个地方开始读 MustExist: false,]]></description>
</item>
<item>
    <title>Go net</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-net/</link>
    <pubDate>Sat, 11 Nov 2023 10:25:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-net/</guid>
    <description><![CDATA[Go语言标准库net包介绍 一、域名解析 DNS 记录是与 DNS 服务器关联的映射文件，无论每个域名与哪个 IP 地址关联，它们都能处理发送到每个域名的请求。ne]]></description>
</item>
<item>
    <title>Go mapstructure</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-mapstructure/</link>
    <pubDate>Sat, 11 Nov 2023 10:24:54 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-mapstructure/</guid>
    <description><![CDATA[mapstructure 转换库 简介 mapstructure用于将通用的map[string]interface{}解码到对应的 Go 结构体中，或者执行相反的操作。很多]]></description>
</item>
<item>
    <title>Go leveldb</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-leveldb/</link>
    <pubDate>Sat, 11 Nov 2023 10:24:52 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-leveldb/</guid>
    <description><![CDATA[Go leveldb库 github地址：https://github.com/syndtr/goleveldb 安装： go get github.com/syndtr/goleveldb/leveldb 简介： levelDB在]]></description>
</item>
<item>
    <title>Go ini</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-ini/</link>
    <pubDate>Sat, 11 Nov 2023 10:24:50 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-ini/</guid>
    <description><![CDATA[Go ini库 参考：https://juejin.cn/post/6844904048764649479 简介 ini 是 Windows 上常用的配置文件格式。MySQ]]></description>
</item>
<item>
    <title>Go homedir</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-homedir/</link>
    <pubDate>Sat, 11 Nov 2023 10:24:49 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-homedir/</guid>
    <description><![CDATA[homedir家目录 GitHub地址：https://github.com/mitchellh/go-homedir 使用os/user获取用]]></description>
</item>
</channel>
</rss>
