<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Blog</title>
        <link>https://serialt.github.io/</link>
        <description>This is my cool site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>tserialt@gmail.com (serialt)</managingEditor>
            <webMaster>tserialt@gmail.com (serialt)</webMaster><lastBuildDate>Sun, 11 Aug 2024 11:30:27 &#43;0800</lastBuildDate>
            <atom:link href="https://serialt.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>postgresql</title>
    <link>https://serialt.github.io/posts/2023-11-12-postgresql/</link>
    <pubDate>Sun, 11 Aug 2024 11:30:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-12-postgresql/</guid>
    <description><![CDATA[PostgreSQL 一、安装 docker 安装 # docker-compose.yaml version: &#34;3&#34; services: postgres10-5432: image: &#34;postgres:10-bullseye&#34; container_name: postgres10-5432 shm_size: &#34;1gb&#34; restart: always ports: - &#34;5432:5432&#34; volumes: - /data/postgresql:/var/lib/postgresql/data - $PWD/init.sql:/docker-entrypoint-initdb.d/init.sql environment: - POSTGRES_PASSWORD=xxxxxxxxxxx # init.sql CREATE USER db_user WITH CREATEDB ENCRYPTED PASSWORD &#39;xxxxxxxxxx&#39;; alter user db_user superuser; mac ### install # 安装指定版本需要加@,例如 @14 brew install postgresql@14 # 查]]></description>
</item>
<item>
    <title>Go basic</title>
    <link>https://serialt.github.io/posts/2023-11-11-go-basic/</link>
    <pubDate>Sun, 11 Aug 2024 10:26:09 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2023-11-11-go-basic/</guid>
    <description><![CDATA[1、变量定义 var name string var isOk bool // 隐式申明 a := 100 str := &#34;sugar&#34; // 批量声明 var ( a string b int c bool d float32 ) // 变量的初始化 var name string = &#34;github&#34; var age int = 10 var name, age = &#34;github&#34;, 11 // 类型推导 var name =]]></description>
</item>
<item>
    <title>TF-lib</title>
    <link>https://serialt.github.io/posts/2024-07-21-tf-lib/</link>
    <pubDate>Sun, 21 Jul 2024 21:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-07-21-tf-lib/</guid>
    <description><![CDATA[Terraform 常用 provider http tls helm kubernetes vault null local dns random ad cloud： aws aliyun tencent cloud huaweicloud 第三方库： shell，执行命令，获取返回值：shell gitlab harbor nexus：datadriver]]></description>
</item>
<item>
    <title>TF-dev</title>
    <link>https://serialt.github.io/posts/2024-06-30-dev-terraform-provider/</link>
    <pubDate>Sat, 20 Jul 2024 09:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-30-dev-terraform-provider/</guid>
    <description><![CDATA[Dev terraform provider 基于新框架tpf开发 开发示例： https://github.com/hashicorp/terraform-provider-scaffolding-framework https://github.com/serialt/terraform-provider-demo 参考示例： https://github.com/hashicorp/terraform-provider-hashicups 一、调试 provider 1、debug terraform # makefile default: install build: go build -v ./... install: go install -v ./... vscode 调试 terraform provider 1）vscode launch cat .vscode/launch.json {]]></description>
</item>
<item>
    <title>Protobuf</title>
    <link>https://serialt.github.io/posts/2024-07-07-protobuf/</link>
    <pubDate>Sat, 20 Jul 2024 09:21:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-07-07-protobuf/</guid>
    <description><![CDATA[Protobuf gRPC推荐使用proto3，这里只介绍常用语法，按照官方文档的结构翻译，英文水平有限，复杂的部分果断放弃，更多高级使用姿势请参考官方文档]]></description>
</item>
<item>
    <title>kratos</title>
    <link>https://serialt.github.io/posts/2024-07-07-kratos/</link>
    <pubDate>Sat, 20 Jul 2024 09:20:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-07-07-kratos/</guid>
    <description><![CDATA[Kratos 目录结构 . ├── Dockerfile ├── LICENSE ├── Makefile ├── README.md ├── api // 下面维护了微服务使用的proto文件以及根据它们所生成的go文件 │ └── helloworld │ └── v1 │]]></description>
</item>
<item>
    <title>openssh-cve</title>
    <link>https://serialt.github.io/posts/2024-07-01-cve/</link>
    <pubDate>Mon, 01 Jul 2024 21:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-07-01-cve/</guid>
    <description><![CDATA[CVE OpenSSH CVE-2024-6387 该漏洞是 OpenSSH 服务器 （sshd） 中的信号处理程序争用条件，允许在基于 glibc 的 Linux 系统上以 root 身份执行未经身份验证的远程代码执行 （RCE）;这带来了]]></description>
</item>
<item>
    <title>winsw</title>
    <link>https://serialt.github.io/posts/2024-06-27.winsw/</link>
    <pubDate>Sun, 30 Jun 2024 15:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-27.winsw/</guid>
    <description><![CDATA[WinSW 服务管理 ​ ​ 有时候需要将bat、exe等文件作为Windows的服务，可以使用bat、nssm等工具将此类文件设置为Windows服务，但]]></description>
</item>
<item>
    <title>Java</title>
    <link>https://serialt.github.io/posts/2024-06-27-java/</link>
    <pubDate>Sun, 30 Jun 2024 15:20:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-27-java/</guid>
    <description><![CDATA[Java 1、Hello world java 的包名需要和目录一致，类名需要与文件名一致 [sugar@Sugar java]🐳 tree . . └── Hello └── HelloWorld.java 1 directory, 1 file HelloWorld.java package Hello; public class HelloWorld { public static void main(String[] args) { System.out.println(&#34;hello,world&#34;); } } [sugar@Sugar]]></description>
</item>
<item>
    <title>caddy</title>
    <link>https://serialt.github.io/posts/2024-06-26-caddy/</link>
    <pubDate>Wed, 26 Jun 2024 22:29:10 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-26-caddy/</guid>
    <description><![CDATA[Caddy Caddy 是一个 Go 编写的 Web 服务器，类似于 Nginx，Caddy 提供了更加强大的功能，随着 v2 版本发布 Caddy 已经可以作为中小型站点 Web 服务器的另一个选择；相]]></description>
</item>
</channel>
</rss>
