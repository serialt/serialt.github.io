<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Blog</title>
        <link>https://serialt.github.io/posts/</link>
        <description>All Posts | Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>tserialt@gmail.com (serialt)</managingEditor>
            <webMaster>tserialt@gmail.com (serialt)</webMaster><lastBuildDate>Sat, 04 Jan 2025 14:40:01 &#43;0800</lastBuildDate><atom:link href="https://serialt.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Go lo</title>
    <link>https://serialt.github.io/posts/2025-01-04-lo/</link>
    <pubDate>Sat, 04 Jan 2025 14:40:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-01-04-lo/</guid>
    <description><![CDATA[Go lo 使用 go get github.com/samber/lo 使用 // 将切片中的重复元素去掉，只保留第一个出现的元素。 names := lo.Uniq([]string{&#34;Samuel&#34;, &#34;John&#34;, &#34;Samuel&#34;}) // []string{&#34;Samuel&#34;, &#34;John&#34;} // 生成map // 将切片或数组转换为map，key是call]]></description>
</item>
<item>
    <title>Go set</title>
    <link>https://serialt.github.io/posts/2025-01-04-goset/</link>
    <pubDate>Sat, 04 Jan 2025 14:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-01-04-goset/</guid>
    <description><![CDATA[Go Set 集合 Github地址：https://github.com/deckarep/golang-set 使用： go get github.com/deckarep/golang-set/v2 集合里的元素不会重复 示例：]]></description>
</item>
<item>
    <title>Go goose</title>
    <link>https://serialt.github.io/posts/2024-11-25-goose/</link>
    <pubDate>Mon, 25 Nov 2024 19:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-11-25-goose/</guid>
    <description><![CDATA[Goose 数据库版本管理 集成 package main import ( &#34;context&#34; &#34;flag&#34; &#34;log&#34; &#34;os&#34; &#34;github.com/pressly/goose/v3&#34; _ &#34;modernc.org/sqlite&#34; ) var ( flags = flag.NewFlagSet(&#34;goose&#34;, flag.ExitOnError) dir = flags.String(&#34;dir&#34;, &#34;.&#34;, &#34;directory with migration files&#34;) ) func main() { flags.Parse(os.Args[1:]) args := flags.Args() if len(args) &lt; 3 { flags.Usage() return } dbstring, command := args[1], args[2] db, err := goose.OpenDBWithDriver(&#34;sqlite&#34;, dbstring) if err != nil { log.Fatalf(&#34;goose: failed to]]></description>
</item>
<item>
    <title>Java Basic</title>
    <link>https://serialt.github.io/posts/2024-10-26-java/</link>
    <pubDate>Sat, 26 Oct 2024 19:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-10-26-java/</guid>
    <description><![CDATA[Java 一、基础 1、helloworld public class Hello { public static void main(String[] args) { System.out.println(&#34;Hello, world!&#34;); } } [root@Sugar j1]🐳 java Hello.java Hello, world! 2、变量定义 int n = 100; n = 200; // 变量n赋值为200 int i2 = -2147483648; int i3 =]]></description>
</item>
<item>
    <title>Ubuntu cloud-init</title>
    <link>https://serialt.github.io/posts/2024-10-26-ubuntu-cloud-init/</link>
    <pubDate>Sat, 26 Oct 2024 14:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-10-26-ubuntu-cloud-init/</guid>
    <description><![CDATA[cloud-init https://hmli.ustc.edu.cn/doc/linux/ubuntu-autoinstall/ubuntu-autoinstall.html ubuntu 安装后获取当前的user-data: /var/log/installer/autoinstall-user-data 示例： #cloud-config autoinstall: version: 1 apt: disable_components: [] fallback: offline-install geoip: true mirror-selection: primary: - uri: http://mirrors.ustc.edu.cn/ubuntu-ports - country-mirror - arches: &amp;id001 - amd64 - i386 uri: http://mirrors.ustc.edu.cn/ubuntu/ - arches: &amp;id002 - s390x - arm64 - armhf - powerpc - ppc64el - riscv64 uri: http://mirrors.ustc.edu.cn/ubuntu-ports preserve_sources_list:]]></description>
</item>
<item>
    <title>Go conc</title>
    <link>https://serialt.github.io/posts/2024-10-20-go-conc/</link>
    <pubDate>Sun, 20 Oct 2024 19:38:01 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-10-20-go-conc/</guid>
    <description><![CDATA[Go conc 参考链接 https://www.liwenzhou.com/posts/Go/conc/ go package main import ( &#34;fmt&#34; &#34;time&#34; ) func main() { for i := 0; i &lt; 5; i++ { go func(num int) { fmt.Println(num) }(i) } time.Sleep(5 * time.Second) } sync.WaitGroup 控制并发 package main import ( &#34;fmt&#34; &#34;sync&#34; ) var wg sync.WaitGroup func hello(i int) { defer wg.Done() fmt.Println(&#34;Hello Goroutine!&#34;, i) } func main() { for i := 0;]]></description>
</item>
<item>
    <title>TF-dev</title>
    <link>https://serialt.github.io/posts/2024-06-30-dev-terraform-provider/</link>
    <pubDate>Sun, 13 Oct 2024 09:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-06-30-dev-terraform-provider/</guid>
    <description><![CDATA[Dev terraform provider 基于新框架tpf开发 开发示例： https://github.com/hashicorp/terraform-provider-scaffolding-framework https://github.com/serialt/terraform-provider-demo 参考示例： https://github.com/hashicorp/terraform-provider-hashicups 一、调试 provider 1、debug terraform # makefile default: install build: go build -v ./... install: go install -v ./... vscode 调试 terraform provider 1）vscode launch cat .vscode/launch.json {]]></description>
</item>
<item>
    <title>CloudBeaver</title>
    <link>https://serialt.github.io/posts/2024-10-11-cloudbeaver/</link>
    <pubDate>Fri, 11 Oct 2024 20:45:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-10-11-cloudbeaver/</guid>
    <description><![CDATA[CloudBeaver web 版 DBeaver docker-compose 安装 version: &#34;3&#34; services: cloudbeaver: image: dbeaver/cloudbeaver:24 container_name: cloudbeaver restart: always ports: - &#34;8978:8978&#34; volumes: - &#34;/data/cloudbeaver:/opt/cloudbeaver/workspace&#34; networks: - app networks: app: # 使用外部共享等网卡 external: true terraform kubernetes https://github.com/serialt/terraform-module-cloudbeaver]]></description>
</item>
<item>
    <title>sanic</title>
    <link>https://serialt.github.io/posts/2024-09-17-sanic/</link>
    <pubDate>Tue, 17 Sep 2024 19:45:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-09-17-sanic/</guid>
    <description><![CDATA[sanic 安装 python3 -m venv venv . venv/bin/activate pip3 install sanic helloworld from sanic import Sanic from sanic import text app = Sanic(&#34;Myapp&#34;) @app.get(&#34;/&#34;) async def test(request): return text(&#34;hello world&#34;) if __name__ == &#34;__main__&#34;: app.run(host=&#34;0.0.0.0&#34;, port=8090, workers=4) vscode debug { &#34;version&#34;: &#34;0.2.0&#34;, &#34;configurations&#34;: [ { &#34;name&#34;: &#34;Python Debugger: Current File&#34;, &#34;type&#34;: &#34;debugpy&#34;, &#34;request&#34;: &#34;launch&#34;, &#34;python&#34;: &#34;${workspaceFolder}/venv/bin/python3&#34;, &#34;program&#34;: &#34;main.py&#34;, // &#34;console&#34;: &#34;integratedTerminal&#34;, } ] }]]></description>
</item>
<item>
    <title>Gorm Gen</title>
    <link>https://serialt.github.io/posts/2024-09-09-gorm-gen/</link>
    <pubDate>Mon, 09 Sep 2024 20:09:42 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-09-09-gorm-gen/</guid>
    <description><![CDATA[Gorm Gen 参考链接：https://www.liwenzhou.com/posts/Go/gen/ Gen是一个基于GORM的安全ORM框架，其主要]]></description>
</item>
</channel>
</rss>
