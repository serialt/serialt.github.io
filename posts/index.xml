<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Blog</title>
        <link>https://serialt.github.io/posts/</link>
        <description>All Posts | Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>tserialt@gmail.com (serialt)</managingEditor>
            <webMaster>tserialt@gmail.com (serialt)</webMaster><lastBuildDate>Sat, 23 Mar 2024 10:37:07 &#43;0800</lastBuildDate><atom:link href="https://serialt.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>OpenConnect</title>
    <link>https://serialt.github.io/posts/2024-03-21-openconnect/</link>
    <pubDate>Sat, 23 Mar 2024 10:37:07 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-03-21-openconnect/</guid>
    <description><![CDATA[OpenConnect 参考文档 https://github.com/huataihuang/cloud-atlas-draft/blob/master/security/vpn/openconnect/deploy_ocserv_vpn_server_on_ubuntu.md https://www.cnblogs.com/grafin/p/17785264.html https://cn.linux-console.net/?p=22087 OpenConnect起源于对Cisco AnyConnect VPN客户端的开源替代方案的需求。Cisco AnyConnect是一款商业VPN解]]></description>
</item>
<item>
    <title>k3s-cert</title>
    <link>https://serialt.github.io/posts/2024-03-11-k3s-cert/</link>
    <pubDate>Thu, 21 Mar 2024 21:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-03-11-k3s-cert/</guid>
    <description><![CDATA[K3s 证书 k3s 根CA证书默认10年，签署的证书有效期默认1年，在到期前的90天内需要重启，重启后会自动轮转证书。 参考文档： https://forums.rancher.cn/t/k3s-ca-10/331 https://blog.starudream.cn/2023/07/21/k3s-client-cert-extend/ https://forums.rancher.cn/t/k3s-ca-10/331/37 https://github.com/qkboy/k3s/tree/v1.29.0%2Bk3s1-longcert https://docs.k3s.io/zh/cli/certificate#%E8%BD%AE%E6%8D%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%81%E4%B9%A6 https://www.linuxfly.org/post/733/ 一、手动轮转]]></description>
</item>
<item>
    <title>Terraform Registry Mirror</title>
    <link>https://serialt.github.io/posts/2024-03-17-tf-mirror-registery/</link>
    <pubDate>Sun, 17 Mar 2024 16:37:07 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-03-17-tf-mirror-registery/</guid>
    <description><![CDATA[Terraform Registry Mirror terraform 的 provider 托管在海外，使用时候会经常因为网络问题导致下载失败，terraform 官方有 Provider Network Mirror Protocol，支持使用本地文件和 Static Webs]]></description>
</item>
<item>
    <title>Packer</title>
    <link>https://serialt.github.io/posts/2024-03-15-packer/</link>
    <pubDate>Sat, 16 Mar 2024 18:37:07 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-03-15-packer/</guid>
    <description><![CDATA[Packer 参考链接： https://developer.hashicorp.com/packer/docs?product_intent=packer https://blog.k8s.li/packer-vsphere-example.html https://cloud.tencent.com/developer/article/1474736 https://blog.csdn.net/weixin_45941099/article/details/123838526 https://github.com/serialt/packer-demo https://lonegunmanb.github.io/packer-handbook/ 介绍： Packer是用一个配置文件，在多种云计算平台上创建完全一致镜像的开源工具。Packer是由HashiCorp]]></description>
</item>
<item>
    <title>Go Embed</title>
    <link>https://serialt.github.io/posts/2024-03-15-go-embed/</link>
    <pubDate>Sat, 16 Mar 2024 18:25:07 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-03-15-go-embed/</guid>
    <description><![CDATA[Go embed 实现将文件打包到Go程序中 参考链接：https://juejin.cn/post/7103539856805986334 Go是一门编译型]]></description>
</item>
<item>
    <title>TF Harbor</title>
    <link>https://serialt.github.io/posts/2024-03-09-tf-harbor/</link>
    <pubDate>Sat, 09 Mar 2024 20:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-03-09-tf-harbor/</guid>
    <description><![CDATA[Terraform Harbor 管理 provider.tf terraform { required_providers { harbor = { source = &#34;goharbor/harbor&#34; version = &#34;3.10.9&#34; } } } # set env # HARBOR_USERNAME # HARBOR_PASSWORD provider &#34;harbor&#34; { url = var.harbor.url insecure = var.harbor.insecure } user.tf resource &#34;harbor_user&#34; &#34;upload&#34; { admin = true comment = &#34;用于镜像上传和下载使用&#34; email]]></description>
</item>
<item>
    <title>tf-code</title>
    <link>https://serialt.github.io/posts/2024-02-25-tf-code/</link>
    <pubDate>Sun, 25 Feb 2024 20:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-02-25-tf-code/</guid>
    <description><![CDATA[Terraform 代码片段 1、变量控制代码是否启用 module &#34;istio&#34; { count = var.istio.enabled ? 1 : 0 source = &#34;xxxxxx&#34; } 2、state文件中获取数据 state文件中需要有output，才能使用 data &#34;terraform_remote_state&#34; &#34;global&#34;]]></description>
</item>
<item>
    <title>ktconnect</title>
    <link>https://serialt.github.io/posts/2024-01-29-ktconnect/</link>
    <pubDate>Mon, 29 Jan 2024 20:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-01-29-ktconnect/</guid>
    <description><![CDATA[KtConnect 官方文档：https://alibaba.github.io/kt-connect/#/zh-cn/guide/quickstart 简单示]]></description>
</item>
<item>
    <title>Alpine vm</title>
    <link>https://serialt.github.io/posts/2024-01-22-alpine-vm/</link>
    <pubDate>Mon, 22 Jan 2024 20:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-01-22-alpine-vm/</guid>
    <description><![CDATA[alpine 虚拟机安装 使用alpine-vm iso 文件进行安装 参考文档： https://www.qunniao.net/1408.html https://wener.me/notes/os/alpine/intro https://blog.xiaohack.org/4674.html https://tonylee.name/Alpine-Linux-4f1cbdb482754c65a61e7f08e9691234 关闭交换分区减小镜像大小： vi /sbin/setup-alpine # 在 setup-disk 增加参数关闭交换分区 setup-disk -s 0 alpine 3.19 镜像可以]]></description>
</item>
<item>
    <title>Python Cert</title>
    <link>https://serialt.github.io/posts/2024-01-15-python-cert/</link>
    <pubDate>Tue, 16 Jan 2024 20:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-01-15-python-cert/</guid>
    <description><![CDATA[Python 自签名证书 mozilla 维护者一个公共ca的文件，在使用http客户端使用自签名证书的时候可以把对应的文件合并然后再导入，示例代码： requirements.txt certifi==2023.11.17 urllib3==2.1.0 #!/usr/bin/env python3 # coding=utf-8 # ***********************************************************************]]></description>
</item>
</channel>
</rss>
