<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>DevOps - Category - Blog</title>
        <link>https://serialt.github.io/categories/devops/</link>
        <description>DevOps - Category - Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>tserialt@gmail.com (serialt)</managingEditor>
            <webMaster>tserialt@gmail.com (serialt)</webMaster><lastBuildDate>Wed, 03 Sep 2025 21:26:27 &#43;0800</lastBuildDate><atom:link href="https://serialt.github.io/categories/devops/" rel="self" type="application/rss+xml" /><item>
    <title>TF-dev</title>
    <link>https://serialt.github.io/posts/2025-09-03-dev-terraform-provider/</link>
    <pubDate>Wed, 03 Sep 2025 21:26:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2025-09-03-dev-terraform-provider/</guid>
    <description><![CDATA[Dev terraform provider 基于新框架tpf开发 开发示例： https://github.com/hashicorp/terraform-provider-scaffolding-framework https://github.com/serialt/terraform-provider-demo 参考示例： https://github.com/hashicorp/terraform-provider-hashicups 一、调试 provider 1、debug terraform # makefile default: install build: go build -v ./... install: go install -v ./... vscode 调试 terraform provider 1）vscode launch cat .vscode/launch.json {]]></description>
</item>
<item>
    <title>CloudBeaver</title>
    <link>https://serialt.github.io/posts/2024-10-11-cloudbeaver/</link>
    <pubDate>Fri, 11 Oct 2024 20:45:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-10-11-cloudbeaver/</guid>
    <description><![CDATA[CloudBeaver web 版 DBeaver docker-compose 安装 version: &#34;3&#34; services: cloudbeaver: image: dbeaver/cloudbeaver:24 container_name: cloudbeaver restart: always ports: - &#34;8978:8978&#34; volumes: - &#34;/data/cloudbeaver:/opt/cloudbeaver/workspace&#34; networks: - app networks: app: # 使用外部共享等网卡 external: true terraform kubernetes https://github.com/serialt/terraform-module-cloudbeaver]]></description>
</item>
<item>
    <title>Gorm Gen</title>
    <link>https://serialt.github.io/posts/2024-09-09-gorm-gen/</link>
    <pubDate>Mon, 09 Sep 2024 20:09:42 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-09-09-gorm-gen/</guid>
    <description><![CDATA[Gorm Gen 参考链接：https://www.liwenzhou.com/posts/Go/gen/ Gen是一个基于GORM的安全ORM框架，其主要]]></description>
</item>
<item>
    <title>Debug in VSCode</title>
    <link>https://serialt.github.io/posts/2024-09-08-vscode-debug/</link>
    <pubDate>Sun, 08 Sep 2024 20:09:42 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-09-08-vscode-debug/</guid>
    <description><![CDATA[Debug In VSCode 一、GO 1、安装插件： golang.go r3inbowari.gomodexplorer 安装go debug相关组件 command + shift + p &ndash;&gt; go install &ndash;&gt; 勾选所有进行安装 2、lanuch.json { // 使用 IntelliSense 了解相关属性]]></description>
</item>
<item>
    <title>kvm</title>
    <link>https://serialt.github.io/posts/2024-08-29-kvm.md/</link>
    <pubDate>Thu, 29 Aug 2024 19:35:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-08-29-kvm.md/</guid>
    <description><![CDATA[KVM virt-install 安装虚拟机 virt-install 示例 virt-install \ --name=pc01 \ --graphics vnc,listen=0.0.0.0,port=5901,keymap=en_us \ --ram=1024 \ --vcpus=1 \ --disk path=/var/lib/libvirt/images/pc01.img,size=9,format=qcow2 \ --bridge=virbr0 \ --location=ftp://172.16.8.100/rhel6.6 \ --extra-args=&#34;ks=ftp://172.16.8.100/rhel6.4.ks&#34; virt-install \ --name=pc02 \ --graphics vnc,listten=0.0.0.0,port=5920,keymap=en_us \ --noautoconsole \ --ram=1024 \ --vcpus=1 \ --disk path=/var/lib/libvirt/images/pc02.img,size=9,format=qcow2 \ --bridge=virbr0 \ --location=ftp://172.16.8.100/rhel6.4 \ --extra-args=&#34;ks=ftp://172.16.8.100/rhel6.4.ks&#34; virt-install \ --name=pc03 \ --nographics \ --ram=1024 \ --vcpus=1 \ --disk path=/var/lib/libvirt/images/pc03.img,size=9,format=qcow2 \ --bridg=virbr0 --location=ftp://172.16.8.100/rhel6.4 \ --extra-args=&#34;ks=ftp://172.16.8.100/rhel6.4.ks console=tty0 console=ttyS0&#34; #]]></description>
</item>
<item>
    <title>flutter</title>
    <link>https://serialt.github.io/posts/2024-08-29-flutter/</link>
    <pubDate>Thu, 29 Aug 2024 19:34:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-08-29-flutter/</guid>
    <description><![CDATA[一、flutter 安装 https://flutter.cn/docs/get-started/install 安装源国内地址： export PUB_HOSTED_URL=https://pub.flutter-io.cn export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn flutter docker镜像打包 1、flutter FROM --platform=linux/amd64 debian:bullseye ARG FLUTTER_VERSION=2.2.3 ENV LANG=C.UTF-8 ENV PUB_HOSTED_URL=https://pub.flutter-io.cn ENV FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn ENV TZ=Asia/Shanghai ENV DEBIAN_FRONTEND=noninteractive RUN sed -i &#39;s/\w*.debian.org/mirrors.ustc.edu.cn/g&#39; /etc/apt/sources.list RUN apt-get update &amp;&amp; apt-get upgrade]]></description>
</item>
<item>
    <title>Skopeo</title>
    <link>https://serialt.github.io/posts/skopeo/</link>
    <pubDate>Mon, 19 Aug 2024 20:26:42 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/skopeo/</guid>
    <description><![CDATA[镜像同步 参考链接： https://lework.github.io/2020/04/13/skopeo/ https://blog.k8s.li/skopeo.html 日常工作中，需要将各种镜像搬到对应的仓库中，docker 适合于构建镜像，将镜像推送于仓库中。镜像被推送到仓库中后，如果]]></description>
</item>
<item>
    <title>redis</title>
    <link>https://serialt.github.io/posts/2024-08-31-redis/</link>
    <pubDate>Sun, 11 Aug 2024 19:45:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-08-31-redis/</guid>
    <description><![CDATA[Redis Redis 特点 开源数据库 配置简单 支持内存存储数据 支持持久化存储数据 datafile 数据文件 *.rdb aof(append only file)文件，日志文件 支持多实例部署 支持主从复制、集群 支持事务]]></description>
</item>
<item>
    <title>手册</title>
    <link>https://serialt.github.io/posts/2024-08-29-other/</link>
    <pubDate>Sun, 11 Aug 2024 19:39:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-08-29-other/</guid>
    <description><![CDATA[腾讯云轻量优化 #!/bin/bash #fuck tx process rm -rf /usr/local/sa rm -rf /usr/local/agenttools rm -rf /usr/local/qcloud process=(sap100 secu-tcs-agent sgagent64 barad_agent agent agentPlugInD pvdriver ) for i in ${process[@]} do for A in $(ps aux |grep $i |grep -v grep |awk &#39;{print $2}&#39;) do kill -9 $A done done chkconfig --level 35 postfix off service postfix stop echo &#39;&#39;&gt;/var/spool/cron/root echo &#39;#!/bin/bash&#39; &gt;/etc/rc.local git-code https://github.com/4x99/code6 RHE]]></description>
</item>
<item>
    <title>metallb</title>
    <link>https://serialt.github.io/posts/2024-08-11-metallb/</link>
    <pubDate>Sun, 11 Aug 2024 19:34:27 &#43;0800</pubDate>
    <author>serialt</author>
    <guid>https://serialt.github.io/posts/2024-08-11-metallb/</guid>
    <description><![CDATA[MetalLB 自建k8s的 loadbalancer https://www.lixueduan.com/posts/cloudnative/01-metallb/ https://www.bboy.app/2021/01/11/metallb%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8/ https://ieevee.com/tech/2019/06/30/metallb.html https://cloud.tencent.com/developer/article/2146391#:~:text=%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85,Metallb%E6%94%AF%E6%8C%81%E9%80%9A%E8%BF%87Kuberntes%E6%B8%85%E5%8D%95%E3%80%81Helm%E5%92%8CKustomize%E6%96%B9%E5%BC%8F%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2%EF%BC%8C%E6%9C%AC%E6%96%87%E6%88%91%E4%BB%AC%E5%B0%86%E4%BB%A5Kuberntes%E6%B8%85%E5%8D%95%E4%B8%BA%E4%BE%8B%E4%BB%8B%E7%BB%8D%E4%BA%A7%E5%93%81%E7%9A%84%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85%EF%BC%8C%E9%83%A8%E7%BD%B2%E7%9A%84%E7%89%88%E6%9C%AC%E4%B8%BA%E6%9C%80%E6%96%B0%E7%9A%84v0.13.4%E3%80%82 简介 在Kubernetes部署完成服务后，我们经常需要将服务开放给到外部用户访问 。如果是使用云平台（阿里云、腾讯云、]]></description>
</item>
</channel>
</rss>
